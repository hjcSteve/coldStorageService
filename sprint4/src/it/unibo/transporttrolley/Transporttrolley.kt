/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Transporttrolley ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var LASTSTATE : String = ""
			var TicketID : String = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | init e engage basicrobot")
						request("engage", "engage(transporttrolley,125)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="engaged",cond=whenReply("engagedone"))
					transition(edgeName="t09",targetState="quit",cond=whenReply("engagerefused"))
				}	 
				state("engaged") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | basicrobot engaged")
						connectToMqttBroker( "tcp://localhost:1883" )
						//val m = MsgUtil.buildEvent(name, "trolley_state", "trolley_state(engaged)" ) 
						publish(MsgUtil.buildEvent(name,"trolley_state","trolley_state(engaged)").toString(), "trolley_state" )   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="atHome", cond=doswitch() )
				}	 
				state("atHome") { //this:State
					action { //it:State
						 LASTSTATE = "atHome"  
						//val m = MsgUtil.buildEvent(name, "trolley_state", "trolley_state($LASTSTATE)" ) 
						publish(MsgUtil.buildEvent(name,"trolley_state","trolley_state($LASTSTATE)").toString(), "trolley_state" )   
						CommUtils.outyellow("$name | basicrobot at Home")
						updateResourceRep( "trolleystate($name,4asdasdasdasdas)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t010",targetState="goingIndoor",cond=whenDispatch("dischargeTrolley"))
				}	 
				state("goingIndoor") { //this:State
					action { //it:State
						request("moverobot", "moverobot(0,4)" ,"basicrobot" )  
						if( checkMsgContent( Term.createTerm("dischargeTrolley(TICKETID)"), Term.createTerm("dischargeTrolley(Ticketnum)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 LASTSTATE = "goingIndoor" 
												TicketID = payloadArg(0);
								//val m = MsgUtil.buildEvent(name, "trolley_state", "trolley_state($LASTSTATE)" ) 
								publish(MsgUtil.buildEvent(name,"trolley_state","trolley_state($LASTSTATE)").toString(), "trolley_state" )   
								CommUtils.outyellow("$name | vado all'INDOOR")
						}
						if( checkMsgContent( Term.createTerm("serve_newtruck(TICKET)"), Term.createTerm("serve_newtruck(Ticketnum)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 LASTSTATE = "goingIndoor" 
												TicketID = payloadArg(0);
								CommUtils.outyellow("$name | vado all'INDOOR")
								updateResourceRep( "trolleystate($name,1)"  
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="atIndoor",cond=whenReply("moverobotdone"))
					transition(edgeName="t012",targetState="stopped",cond=whenEvent("alarm"))
				}	 
				state("atIndoor") { //this:State
					action { //it:State
						 LASTSTATE = "atIndoor"  
						//val m = MsgUtil.buildEvent(name, "trolley_state", "trolley_state($LASTSTATE)" ) 
						publish(MsgUtil.buildEvent(name,"trolley_state","trolley_state($LASTSTATE)").toString(), "trolley_state" )   
						CommUtils.outyellow("$name | sono in INDOOR")
						CommUtils.outyellow("$name | carico il cibo")
						updateResourceRep("trolleystate($name,2, sosdoterierjenajnefia)" 
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_atIndoor", 
				 	 					  scope, context!!, "local_tout_"+name+"_atIndoor", 3000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t13",targetState="loadDone",cond=whenTimeout("local_tout_"+name+"_atIndoor"))   
				}	 
				state("loadDone") { //this:State
					action { //it:State
						forward("chargeTaken", "chargeTaken($TicketID)" ,"coldstorageservice" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="goingColdroom", cond=doswitch() )
				}	 
				state("goingColdroom") { //this:State
					action { //it:State
						 LASTSTATE = "goingColdroom"  
						//val m = MsgUtil.buildEvent(name, "trolley_state", "trolley_state($LASTSTATE)" ) 
						publish(MsgUtil.buildEvent(name,"trolley_state","trolley_state($LASTSTATE)").toString(), "trolley_state" )   
						CommUtils.outyellow("$name | vado verso la cold room")
						updateResourceRep( "trolleystate($name,3asdasdasdasdasd)"  
						)
						request("moverobot", "moverobot(4,3)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t014",targetState="atColdroom",cond=whenReply("moverobotdone"))
					transition(edgeName="t015",targetState="stopped",cond=whenEvent("alarm"))
				}	 
				state("atColdroom") { //this:State
					action { //it:State
						 LASTSTATE = "atColdroom"  
						CommUtils.outyellow("$name | sono in Cold Room")
						updateResourceRep( "trolleystate($name,4asdasdasdasdas)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_atColdroom", 
				 	 					  scope, context!!, "local_tout_"+name+"_atColdroom", 3000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t016",targetState="chargeStored",cond=whenTimeout("local_tout_"+name+"_atColdroom"))   
				}	 
				state("chargeStored") { //this:State
					action { //it:State
						 LASTSTATE ="chargedStored"  
						//val m = MsgUtil.buildEvent(name, "trolley_state", "trolley_state($LASTSTATE)" ) 
						publish(MsgUtil.buildEvent(name,"trolley_state","trolley_state($LASTSTATE)").toString(), "trolley_state" )   
						CommUtils.outyellow("$name | terminato deposito. Aspetto istruzioni")
						request("discharged_trolley", "discharged_trolley($TicketID)" ,"coldstorageservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t017",targetState="goingHome",cond=whenReply("idle_trolley"))
					transition(edgeName="t018",targetState="goingIndoor",cond=whenReply("serve_newtruck"))
				}	 
				state("goingHome") { //this:State
					action { //it:State
						 LASTSTATE = "goingHome"  
						//val m = MsgUtil.buildEvent(name, "trolley_state", "trolley_state($LASTSTATE)" ) 
						publish(MsgUtil.buildEvent(name,"trolley_state","trolley_state($LASTSTATE)").toString(), "trolley_state" )   
						CommUtils.outyellow("$name | vado alla posizione HOME")
						updateResourceRep( "trolleystate($name,5asdasdsadasd.)"  
						)
						request("moverobot", "moverobot(0,0)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t019",targetState="atHome",cond=whenReply("moverobotdone"))
					transition(edgeName="t020",targetState="goingIndoor",cond=whenDispatch("dischargeTrolley"))
					transition(edgeName="t021",targetState="stopped",cond=whenEvent("alarm"))
				}	 
				state("stopped") { //this:State
					action { //it:State
						discardMessages = true
						//val m = MsgUtil.buildEvent(name, "trolley_state", "trolley_state(stopped)" ) 
						publish(MsgUtil.buildEvent(name,"trolley_state","trolley_state(stopped)").toString(), "trolley_state" )   
						CommUtils.outyellow("$name | Sono fermo per ostacolo sonar")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t022",targetState="atHome",cond=whenEventGuarded("resume",{ LASTSTATE == "atHome"  
					}))
					transition(edgeName="t023",targetState="goingIndoor",cond=whenEventGuarded("resume",{ LASTSTATE == "goingIndoor"  
					}))
					transition(edgeName="t024",targetState="atIndoor",cond=whenEventGuarded("resume",{ LASTSTATE == "atIndoor"  
					}))
					transition(edgeName="t025",targetState="goingColdroom",cond=whenEventGuarded("resume",{ LASTSTATE == "goingColdroom"  
					}))
					transition(edgeName="t026",targetState="atColdroom",cond=whenEventGuarded("resume",{ LASTSTATE == "atColdroom"  
					}))
					transition(edgeName="t027",targetState="chargeStored",cond=whenEventGuarded("resume",{ LASTSTATE == "chargeStored"  
					}))
					transition(edgeName="t028",targetState="goingHome",cond=whenEventGuarded("resume",{ LASTSTATE == "goingHome"  
					}))
				}	 
				state("quit") { //this:State
					action { //it:State
						forward("disengage", "disengage(transporttrolley)" ,"basicrobot" ) 
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
